{"version":3,"sources":["Component/Input/InputNumber.module.css","Component/Button/Button.module.css","Component/Button/Button.tsx","Component/Screen/ScreenInput.tsx","Component/Screen/ScreenIter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","disabled","isActive","onClick","className","s","button","title","ScreenInput","useState","min","max","errorInput","setErrorInput","newMinValue","minValue","newMaxValue","maxValue","errorHandlerValue","setEditMode","setError","useEffect","htmlFor","type","value","name","onChange","e","currentTarget","onChangeMaxValueHandler","error","onChangeMinValueHandler","ScreenIter","editMode","App","keyMaxValue","keyMinValue","getLocalStorageObjectItem","key","defaultValue","json","localStorage","getItem","JSON","parse","setMinValue","setMaxValue","setValue","disableReset","disableInc","disableSet","newValue","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,MAAQ,6B,iBCA1BD,EAAOC,QAAU,CAAC,OAAS,yB,+JCgBZC,MANf,SAAgBC,GACZ,OACI,wBAAQC,SAAUD,EAAME,WAAYC,QAASH,EAAMG,QAASC,UAAWC,IAAEC,OAAzE,SAAkFN,EAAMO,S,gBCqEjFC,MAtEf,SAAqBR,GAAmB,IAAD,EACCS,mBAAS,CAACC,KAAK,EAAOC,KAAK,IAD5B,mBAC5BC,EAD4B,KAChBC,EADgB,KAK/BC,EAAcd,EAAMe,SACpBC,EAAchB,EAAMiB,SAElBC,EAAoB,WACtBlB,EAAMmB,aAAY,GACdH,GAAe,GAAKA,IAAgBF,GAAeE,EAAcF,GACjED,EAAc,CAACH,KAAK,EAAMC,KAAK,IAC/BX,EAAMoB,UAAS,IACRN,EAAc,GACrBD,EAAc,CAACH,KAAK,EAAMC,KAAK,IAC/BX,EAAMoB,UAAS,KAEfP,EAAc,CAACH,KAAK,EAAOC,KAAK,IAChCX,EAAMoB,UAAS,KA4BvB,OAPAC,qBAAU,eAQN,sBAAKjB,UAAU,SAAf,UACI,gCACI,uBAAOkB,QAAQ,WAAf,wBACA,uBAAOC,KAAK,SACLC,MAAOxB,EAAMiB,SACbQ,KAAK,WACLC,SAtBM,SAACC,GACtBX,GAAeW,EAAEC,cAAcJ,MAC/BxB,EAAM6B,wBAAwBb,GAC9BE,KAoBed,UAAWQ,EAAWD,IAAX,UAAoBN,IAAEyB,OAAU,QAGtD,gCACI,uBAAOR,QAAQ,WAAf,0BACA,uBAAOC,KAAK,SACLC,MAAOxB,EAAMe,SACbU,KAAK,WACLC,SAxCM,SAACC,GACtBb,GAAea,EAAEC,cAAcJ,MAC/BxB,EAAM+B,wBAAwBjB,GAC9BI,KAsCed,UAAWQ,EAAWF,IAAX,UAAoBL,IAAEyB,OAAU,YCtDnDE,MAXf,SAAoBhC,GAEhB,OACI,sBAAKI,UAAaJ,EAAMiC,UAAYjC,EAAMwB,QAAUxB,EAAMiB,SAA4B,SAArE,eAAjB,UACI,qBAAKb,UAAWJ,EAAMiC,SAAN,WAA8B,GAA9C,SAAmDjC,EAAMwB,QACzD,qBAAKpB,UAAWJ,EAAMiC,WAAajC,EAAM8B,MAAQ,GAAjC,WAAhB,0CACA,qBAAK1B,UAAWJ,EAAMiC,UAAYjC,EAAM8B,MAAQ,QAAhC,WAAhB,kCC+FGI,MAvGf,WACI,IAAMC,EAAsB,WACtBC,EAAsB,WAE5B,SAASC,EAA0BC,EAAaC,GAC5C,IAAMC,EAAOC,aAAaC,QAAQJ,GAClC,OAAIE,EACiBG,KAAKC,MAAMJ,GACVhB,MAEXe,EAVJ,MAcqB9B,mBAAiB4B,EAA0BD,EAAa,IAd7E,mBAcJrB,EAdI,KAcM8B,EAdN,OAeqBpC,mBAAiB4B,EAA0BF,EAAa,KAf7E,mBAeJlB,EAfI,KAeM6B,EAfN,OAgBerC,mBAAiBM,GAhBhC,mBAgBJS,EAhBI,KAgBGuB,EAhBH,OAiBqBtC,oBAAkB,GAjBvC,mBAiBJwB,EAjBI,KAiBMd,EAjBN,OAkBeV,oBAAkB,GAlBjC,mBAkBJqB,EAlBI,KAkBGV,EAlBH,KAqCP4B,EAAe,kBAAMxB,IAAUT,GAC/BkC,EAAa,kBAAMzB,IAAUP,GAC7BiC,EAAa,kBAAM,GAsBvB,OApBIjB,IACAe,EAAe,kBAAM,GACrBC,EAAa,kBAAM,GACnBC,EAAa,kBAAM,IAGnBpB,IACAkB,EAAe,kBAAM,GACrBC,EAAa,kBAAM,GACnBC,EAAa,kBAAM,IAYnB,sBAAK9C,UAAU,MAAf,UACI,sBAAKA,UAAU,OAAf,UACI,cAAE,EAAF,CACIW,SAAUA,EACVE,SAAUA,EACVc,wBAdhB,SAAiCoB,GAC7BN,EAAYM,IAcAtB,wBAXhB,SAAiCsB,GAC7BL,EAAYK,IAWAhC,YAAaA,EACbC,SAAUA,IACd,qBAAKhB,UAAU,QAAf,SACI,cAAE,EAAF,CACIG,MAAO,MACPL,SAAUgD,EACV/C,QA7CpB,WACIsC,aAAaW,QAAQhB,EAAaO,KAAKU,UAAU,CAAC7B,MAAOT,KACzD0B,aAAaW,QAAQjB,EAAaQ,KAAKU,UAAU,CAAC7B,MAAOP,KACzD8B,EAAShC,GACTI,GAAY,WA8CR,sBAAKf,UAAU,OAAf,UACI,cAAE,EAAF,CACIoB,MAAOA,EACPS,SAAUA,EACVH,MAAOA,EACPb,SAAUA,IACd,sBAAKb,UAAU,QAAf,UACI,cAAE,EAAF,CACIG,MAAO,MACPL,SAAU+C,EACV9C,QAtEpB,WACQqB,EAAQP,GACR8B,EAASvB,EAAQ,MAsET,cAAE,EAAF,CACIjB,MAAO,QACPL,SAAU8C,EACV7C,QArEpB,WACI4C,EAAShC,gBCrBFuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.827f0d24.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"InputNumber_error__1WL0d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2J12S\"};","import React from \"react\";\r\nimport s from './Button.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    isActive: ()=>boolean\r\n    onClick:()=>void\r\n}\r\n\r\n\r\nfunction Button(props:PropsType) {\r\n    return (\r\n        <button disabled={props.isActive()} onClick={props.onClick} className={s.button}>{props.title}</button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"../Input/InputNumber.module.css\";\r\n\r\ntype PropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    onChangeMinValueHandler: (newValue: number) => void\r\n    onChangeMaxValueHandler: (newValue: number) => void\r\n    setEditMode: (props: boolean) => void\r\n    setError: (props: boolean) => void\r\n}\r\n\r\nfunction ScreenInput(props: PropsType) {\r\n    const [errorInput, setErrorInput] = useState({min: false, max: false})\r\n\r\n    // Почему в пропсах приходят старые значения?\r\n    // В какой момент перерисовывается значение Input\r\n    let newMinValue = props.minValue\r\n    let newMaxValue = props.maxValue\r\n\r\n    const errorHandlerValue = () => {\r\n        props.setEditMode(true)\r\n        if (newMaxValue <= 0 || newMaxValue === newMinValue || newMaxValue < newMinValue) {\r\n            setErrorInput({min: true, max: true})\r\n            props.setError(true)\r\n        } else if (newMinValue < 0) {\r\n            setErrorInput({min: true, max: false})\r\n            props.setError(true)\r\n        } else {\r\n            setErrorInput({min: false, max: false})\r\n            props.setError(false)\r\n        }\r\n    }\r\n\r\n    const onChangeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        newMinValue = +e.currentTarget.value\r\n        props.onChangeMinValueHandler(newMinValue)\r\n        errorHandlerValue()\r\n        // props.errorHandlerValue()\r\n        // setValue(newValue)\r\n        // props.errorHandlerValue()\r\n    }\r\n\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        newMaxValue = +e.currentTarget.value\r\n        props.onChangeMaxValueHandler(newMaxValue)\r\n        errorHandlerValue()\r\n        // props.errorHandlerValue()\r\n        // setValue(newValue)\r\n        // props.errorHandlerValue()\r\n    }\r\n    useEffect(() => {\r\n        // console.log(props.minValue)\r\n        // console.log(props.maxValue)\r\n        // setErrorInput({min: true, max: false})\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"screen\">\r\n            <div>\r\n                <label htmlFor=\"minValue\">max value:</label>\r\n                <input type=\"number\"\r\n                       value={props.maxValue}\r\n                       name=\"minValue\"\r\n                       onChange={onChangeMaxValue}\r\n                       className={errorInput.max ? `${s.error}` : \"\"}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"maxValue\">start value:</label>\r\n                <input type=\"number\"\r\n                       value={props.minValue}\r\n                       name=\"maxValue\"\r\n                       onChange={onChangeMinValue}\r\n                       className={errorInput.min ? `${s.error}` : \"\"}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScreenInput;","import React from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    value: number\r\n    editMode: boolean\r\n    error: boolean\r\n    maxValue:number\r\n}\r\n\r\nfunction ScreenIter(props:PropsType){\r\n\r\n    return (\r\n        <div className={ !props.editMode && props.value === props.maxValue ? `screen error` : \"screen\"}>\r\n            <div className={props.editMode ? `editMode` : \"\"}>{props.value}</div>\r\n            <div className={props.editMode && !props.error ? \"\" : `editMode`}>Enter values and press 'set'</div>\r\n            <div className={props.editMode && props.error ? \"error\" : `editMode`}>Incorrect value!</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScreenIter;","import React, {useState} from 'react';\nimport './App.css';\nimport Button from \"./Component/Button/Button\";\nimport ScreenInput from \"./Component/Screen/ScreenInput\";\nimport ScreenIter from \"./Component/Screen/ScreenIter\";\n\nexport type FilterValuesType = \"enter values and press 'set\" | \"Incorrect value!\"\n\nfunction App() {\n    const keyMaxValue: string = \"MaxValue\"\n    const keyMinValue: string = \"MinValue\"\n\n    function getLocalStorageObjectItem(key: string, defaultValue: number) {\n        const json = localStorage.getItem(key)\n        if (json) {\n            let inputValue = JSON.parse(json)\n            return inputValue.value\n        } else {\n            return defaultValue\n        }\n    }\n\n    const [minValue, setMinValue] = useState<number>(getLocalStorageObjectItem(keyMinValue, 0))\n    const [maxValue, setMaxValue] = useState<number>(getLocalStorageObjectItem(keyMaxValue, 10))\n    const [value, setValue] = useState<number>(minValue)\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [error, setError] = useState<boolean>(false)\n\n    function incValue() {\n        if (value < maxValue) {\n            setValue(value + 1)\n        }\n    }\n\n    function resetValue() {\n        setValue(minValue)\n    }\n\n    function setValueInput() {\n        localStorage.setItem(keyMinValue, JSON.stringify({value: minValue}))\n        localStorage.setItem(keyMaxValue, JSON.stringify({value: maxValue}))\n        setValue(minValue)\n        setEditMode(false)\n    }\n\n    let disableReset = () => value === minValue\n    let disableInc = () => value === maxValue\n    let disableSet = () => true\n\n    if (editMode) {\n        disableReset = () => true\n        disableInc = () => true\n        disableSet = () => false\n    }\n\n    if (error) {\n        disableReset = () => true\n        disableInc = () => true\n        disableSet = () => true\n    }\n\n    function onChangeMinValueHandler(newValue: number) {\n        setMinValue(newValue)\n    }\n\n    function onChangeMaxValueHandler(newValue: number) {\n        setMaxValue(newValue)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"item\">\n                < ScreenInput\n                    minValue={minValue}\n                    maxValue={maxValue}\n                    onChangeMinValueHandler={onChangeMinValueHandler}\n                    onChangeMaxValueHandler={onChangeMaxValueHandler}\n                    setEditMode={setEditMode}\n                    setError={setError}/>\n                <div className=\"panel\">\n                    < Button\n                        title={\"set\"}\n                        isActive={disableSet}\n                        onClick={setValueInput}\n\n                    />\n                </div>\n            </div>\n            <div className=\"item\">\n                < ScreenIter\n                    value={value}\n                    editMode={editMode}\n                    error={error}\n                    maxValue={maxValue}/>\n                <div className=\"panel\">\n                    < Button\n                        title={\"inc\"}\n                        isActive={disableInc}\n                        onClick={incValue}\n                    />\n                    < Button\n                        title={\"reset\"}\n                        isActive={disableReset}\n                        onClick={resetValue}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}